/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DiamondProxyContract,
  DiamondProxyContractInterface,
} from "../../../contracts/DiamondProxyContract.sol/DiamondProxyContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
      {
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
    ],
    name: "addFacet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610b648061001f6000396000f3fe6080604052600436106100385760003560e01c80635547dad61461017e578063cdffacc6146101a7578063e0c1c786146101e45761003f565b3661003f57005b600061004961020f565b9050600081600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014f9061068d565b60405180910390fd5b3660008037600080366000845af43d6000803e8060008114610179573d6000f35b3d6000fd5b34801561018a57600080fd5b506101a560048036038101906101a091906108d0565b61023c565b005b3480156101b357600080fd5b506101ce60048036038101906101c9919061092c565b610506565b6040516101db9190610968565b60405180910390f35b3480156101f057600080fd5b506101f961058d565b6040516102069190610a41565b60405180910390f35b6000807f298441fe9def864df48883d27c462b8dcef6bbb9cf8d83c2580b381b1a70d8a890508091505090565b600061024661020f565b905060005b82518110156104c757600083828151811061026957610268610a63565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff16836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610358576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034f90610ade565b60405180910390fd5b60405180604001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200184600101805490506bffffffffffffffffffffffff16815250836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050826001018190806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555050808060010191505061024b565b507fea2ef9cf7273efc5d3fe21477cb1fcd7c2c79083512ba63cc855ff70e814f22882846040516104f9929190610afe565b60405180910390a1505050565b600061051061020f565b6000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b606061059761020f565b60010180548060200260200160405190810160405280929190818152602001828054801561062657602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116105d35790505b5050505050905090565b600082825260208201905092915050565b7f46756e6374696f6e20646f6573206e6f74206578697374000000000000000000600082015250565b6000610677601783610630565b915061068282610641565b602082019050919050565b600060208201905081810360008301526106a68161066a565b9050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106ec826106c1565b9050919050565b6106fc816106e1565b811461070757600080fd5b50565b600081359050610719816106f3565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61076d82610724565b810181811067ffffffffffffffff8211171561078c5761078b610735565b5b80604052505050565b600061079f6106ad565b90506107ab8282610764565b919050565b600067ffffffffffffffff8211156107cb576107ca610735565b5b602082029050602081019050919050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610816816107e1565b811461082157600080fd5b50565b6000813590506108338161080d565b92915050565b600061084c610847846107b0565b610795565b9050808382526020820190506020840283018581111561086f5761086e6107dc565b5b835b8181101561089857806108848882610824565b845260208401935050602081019050610871565b5050509392505050565b600082601f8301126108b7576108b661071f565b5b81356108c7848260208601610839565b91505092915050565b600080604083850312156108e7576108e66106b7565b5b60006108f58582860161070a565b925050602083013567ffffffffffffffff811115610916576109156106bc565b5b610922858286016108a2565b9150509250929050565b600060208284031215610942576109416106b7565b5b600061095084828501610824565b91505092915050565b610962816106e1565b82525050565b600060208201905061097d6000830184610959565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109b8816107e1565b82525050565b60006109ca83836109af565b60208301905092915050565b6000602082019050919050565b60006109ee82610983565b6109f8818561098e565b9350610a038361099f565b8060005b83811015610a34578151610a1b88826109be565b9750610a26836109d6565b925050600181019050610a07565b5085935050505092915050565b60006020820190508181036000830152610a5b81846109e3565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f53656c6563746f7220616c726561647920657869737473000000000000000000600082015250565b6000610ac8601783610630565b9150610ad382610a92565b602082019050919050565b60006020820190508181036000830152610af781610abb565b9050919050565b60006040820190508181036000830152610b1881856109e3565b9050610b276020830184610959565b939250505056fea26469706673582212208f04efe45208467e0197cd8b24bcb9d664bb22e11a256e25505d33d3157e058564736f6c634300081c0033";

type DiamondProxyContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondProxyContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondProxyContract__factory extends ContractFactory {
  constructor(...args: DiamondProxyContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DiamondProxyContract> {
    return super.deploy(overrides || {}) as Promise<DiamondProxyContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiamondProxyContract {
    return super.attach(address) as DiamondProxyContract;
  }
  override connect(signer: Signer): DiamondProxyContract__factory {
    return super.connect(signer) as DiamondProxyContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondProxyContractInterface {
    return new utils.Interface(_abi) as DiamondProxyContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondProxyContract {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DiamondProxyContract;
  }
}
