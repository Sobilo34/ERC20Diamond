/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DiamondProxyContractInterface extends utils.Interface {
  functions: {
    "addFacet(address,bytes4[])": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetSelectors()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addFacet" | "facetAddress" | "facetSelectors"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFacet",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "facetSelectors",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addFacet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetSelectors",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut(bytes4[],address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
}

export interface DiamondCutEventObject {
  selectors: string[];
  facet: string;
}
export type DiamondCutEvent = TypedEvent<
  [string[], string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface DiamondProxyContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondProxyContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFacet(
      facet: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    facetSelectors(overrides?: CallOverrides): Promise<[string[]]>;
  };

  addFacet(
    facet: PromiseOrValue<string>,
    selectors: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  facetSelectors(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    addFacet(
      facet: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    facetSelectors(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "DiamondCut(bytes4[],address)"(
      selectors?: null,
      facet?: null
    ): DiamondCutEventFilter;
    DiamondCut(selectors?: null, facet?: null): DiamondCutEventFilter;
  };

  estimateGas: {
    addFacet(
      facet: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    facetAddress(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetSelectors(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addFacet(
      facet: PromiseOrValue<string>,
      selectors: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetSelectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
